!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);class n extends HTMLElement{constructor(t=!1){super(),this.shadow=this.attachShadow({mode:t?"closed":"open"}),this.update(),this.attributeObserver=new MutationObserver(this.attributesChange.bind(this)),this.attributeObserver.observe(this,{attributes:!0})}async update(){this.shadow.innerHTML=await this.render()}bindListener(t,e){switch(t.toLowerCase()){case"attributes":this.attributeChangeFuncs||(this.attributeChangeFuncs=[]),this.attributesChange.push(e);break;default:console.error(`The type '${t}' is not a valid event`)}}attributesChange(t){this.attributeChangeFuncs&&this.attributesChange.forEach(e=>e(t))}}customElements.define("material-card",class extends n{render(){return(function(t){return t})`
      <slot></slot>

      <style>
        :host {
          background: #fff;
          border-radius: 2px;
          display: inline-block;
          height: auto;
          margin: 1rem;
          padding: 1rem;
          position: relative;
          width: 300px;
          box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
        }
      </style>
    `}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,